// Code generated by MockGen. DO NOT EDIT.
// Source: sql_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "microblog/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSQLRepository is a mock of SQLRepository interface.
type MockSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSQLRepositoryMockRecorder
}

// MockSQLRepositoryMockRecorder is the mock recorder for MockSQLRepository.
type MockSQLRepositoryMockRecorder struct {
	mock *MockSQLRepository
}

// NewMockSQLRepository creates a new mock instance.
func NewMockSQLRepository(ctrl *gomock.Controller) *MockSQLRepository {
	mock := &MockSQLRepository{ctrl: ctrl}
	mock.recorder = &MockSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLRepository) EXPECT() *MockSQLRepositoryMockRecorder {
	return m.recorder
}

// FollowRepository mocks base method.
func (m *MockSQLRepository) FollowRepository(bodyFollowers *models.UsernameFollower) (*models.Follower, *models.ErrorMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowRepository", bodyFollowers)
	ret0, _ := ret[0].(*models.Follower)
	ret1, _ := ret[1].(*models.ErrorMessage)
	return ret0, ret1
}

// FollowRepository indicates an expected call of FollowRepository.
func (mr *MockSQLRepositoryMockRecorder) FollowRepository(bodyFollowers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowRepository", reflect.TypeOf((*MockSQLRepository)(nil).FollowRepository), bodyFollowers)
}

// SendMessageRepository mocks base method.
func (m *MockSQLRepository) SendMessageRepository(bodyMessage *models.Message) (*models.Message, *models.ErrorMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageRepository", bodyMessage)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(*models.ErrorMessage)
	return ret0, ret1
}

// SendMessageRepository indicates an expected call of SendMessageRepository.
func (mr *MockSQLRepositoryMockRecorder) SendMessageRepository(bodyMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageRepository", reflect.TypeOf((*MockSQLRepository)(nil).SendMessageRepository), bodyMessage)
}

// TimelineRepository mocks base method.
func (m *MockSQLRepository) TimelineRepository(bodyTimeline *models.Timeline) ([]models.Feed, *models.ErrorMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimelineRepository", bodyTimeline)
	ret0, _ := ret[0].([]models.Feed)
	ret1, _ := ret[1].(*models.ErrorMessage)
	return ret0, ret1
}

// TimelineRepository indicates an expected call of TimelineRepository.
func (mr *MockSQLRepositoryMockRecorder) TimelineRepository(bodyTimeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimelineRepository", reflect.TypeOf((*MockSQLRepository)(nil).TimelineRepository), bodyTimeline)
}
